plugins {
    id 'com.bmuschko.docker-java-application' version '6.4.0'
    id 'com.bmuschko.docker-remote-api' version '6.4.0'
}


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

apply plugin: 'application'

mainClassName = "com.configset.dashboard.Main"

sourceSets {
    functionalTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output

        compileClasspath += sourceSets.test.output
        runtimeClasspath += sourceSets.test.output
    }
}

configurations {
    functionalTestImplementation.extendsFrom implementation
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestImplementation.extendsFrom runtimeOnly
}

dependencies {
    implementation project(':sdk')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.6.1'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.8.6'
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation 'io.javalin:javalin:4.6.4'
    implementation "com.squareup.okhttp3:okhttp:4.5.0"
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.14'
    implementation 'com.hubspot.jinjava:jinjava:2.6.0'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.auth0:java-jwt:4.0.0'

    testImplementation(testFixtures(project(":server")))
    testImplementation 'org.awaitility:awaitility:4.0.2'
    testImplementation 'junit:junit:4.13.2'
    testImplementation group: 'io.mockk', name: 'mockk', version: '1.9.3'
    testImplementation 'org.testcontainers:testcontainers:1.17.3'
    testImplementation "org.testcontainers:postgresql:1.12.2"
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.33.2'

    testImplementation 'org.amshove.kluent:kluent:1.59'
    testImplementation "io.arrow-kt:arrow-core:1.0.1"
    testImplementation 'com.codeborne:selenide:6.7.3'
    testImplementation 'com.codeborne:selenide-proxy:6.7.4'
}

run {
    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5004"]
}

application {
    applicationDefaultJvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5555"]
}


version = "0.0.3"

//dev
task createDevDockerfile(type: Dockerfile) {
    destFile = project.file("$buildDir/docker-dev/Dockerfile")
    from 'openjdk:12'
    addFile("dashboard", "/dashboard")
    entryPoint "/dashboard/bin/dashboard"
    exposePort(8188)
}

task dockerPrepareDevCtx(type: Copy) {
    dependsOn ("installDist", "createDevDockerfile")
    from "$buildDir/install/dashboard"
    into "$buildDir/docker-dev/dashboard"
}

task dockerBuildDevImage(type: DockerBuildImage) {
    inputDir = project.file("$buildDir/docker-dev")
    dependsOn ("dockerPrepareDevCtx")
    images.set(["configset-dashboard-dev:${version}", 'configset-dashboard-dev:latest'])
}

// default
task dockerCreateDefaulfile(type: Dockerfile) {
    destFile = project.file("$buildDir/docker-default/Dockerfile")
    from 'openjdk:12'
    addFile("dashboard", "/dashboard")
    entryPoint "/dashboard/bin/dashboard"
    exposePort(8188)
    environmentVariable("serve.static", "true")
}

task buildFrontend {
    doLast {
        exec {
            workingDir "frontend"
            commandLine = ["npm", "run", "build"]
        }
    }
}

task dockerPrepareDefaultCtx {
    dependsOn ("dockerCreateDefaulfile", "installDist", "buildFrontend")
    doLast {
        project.copy {
            from "$buildDir/install/dashboard"
            into "$buildDir/docker-default/dashboard"
        }
    }
    doLast {
        project.copy {
            from "frontend/dist"
            into "$buildDir/docker-default/dashboard/frontend"
        }
    }
}

task dockerBuildDefaultImage(type: DockerBuildImage) {
    inputDir = project.file("$buildDir/docker-default")
    dependsOn "dockerPrepareDefaultCtx"
    images.set(["configset-dashboard:${version}", 'configset-dashboard:latest'])
}

